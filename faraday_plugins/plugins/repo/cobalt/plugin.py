"""
Faraday Penetration Test IDE
Copyright (C) 2013  Infobyte LLC (http://www.infobytesec.com/)
See the file 'doc/LICENSE' for the license information

"""

from faraday_plugins.plugins.plugin import PluginXMLFormat
import re
import os
from urllib.parse import urlparse
import csv
import io 

current_path = os.path.abspath(os.getcwd())

__author__ = "Blas"
__copyright__ = "Copyright (c) 2019, Infobyte LLC"
__credits__ = ["Blas"]
__license__ = ""
__version__ = "1.0.0"
__maintainer__ = "Blas"
__email__ = "bmoyano@infobytesec.com"
__status__ = "Development"


class CobaltParser:
    """
    The objective of this class is to parse an CSV file generated by the Cobalt tool.

    TODO: Handle errors.
    TODO: Test Cobalt output version. Handle what happens if the parser doesn't support it.
    TODO: Test cases.

    @param Cobalt_filepath A proper simple report generated by Cobalt
    """
    def __init__(self, output):
        output_decode = output.decode("utf-8")
        reader = csv.DictReader(io.StringIO(output_decode))
        self.headers = reader.fieldnames
        self.rows = []
        for row in reader:
            self.rows.append(row)


class CobaltPlugin(PluginXMLFormat):
    """
    Example plugin to parse Cobalt output.
    """

    def __init__(self):
        super().__init__()
        self.extension = ".csv"
        self.identifier_tag = "Cobalt"
        self.id = "Cobalt"
        self.name = "Cobalt CSV Output Plugin"
        self.plugin_version = "0.0.1"
        self.version = "0.0.1"
        self.framework_version = "1.0.1"
        self.options = None
        self._current_output = None
        self._current_path = None
        self._command_regex = re.compile(
            r'^(cobalt|sudo cobalt|\.\/cobalt).*?')
        self.host = None
        self.port = None
        self.protocol = None
        self.fail = None

    def canParseCommandString(self, current_input):
        if self._command_regex.match(current_input.strip()):
            return True
        else:
            return False

    def parseOutputString(self, output, debug=False):
        """
        This method will discard the output the shell sends, it will read it from
        the xml where it expects it to be present.

        NOTE: if 'debug' is true then it is being run from a test case and the
        output being sent is valid.
        """
        try:
            parser = CobaltParser(output)

        except:
            print("Error parser output")
            return None

        vul_ref = []
        for row in parser.rows:
            vul_ref_info = "Criticality Justification:{} Tools Used:{}".format(row['CriticalityJustification'],
                                                                               row['ToolsUsed'])
            vul_ref.append(vul_ref_info)
            url = urlparse(row['BrowserUrl'])
            if url.scheme == 'https':
                protocol = 'HTTPS'
                port = 443
            elif url.scheme == 'http':
                protocol = 'HTTP'
                port = 80
            else:
                protocol = None
                port = 0

            h_id = self.createAndAddHost(name='0.0.0.0', hostnames=[row['BrowserUrl']])
            s_id = self.createAndAddServiceToInterface(h_id, protocol, "tcp", ports=[str(port)], status="open")
            self.createAndAddVulnWebToService(h_id, s_id, name=row['Title'], desc=row['Description'],
                                              ref=vul_ref, resolution=row['SuggestedFix'],
                                              website=row['ReportUrl'], request=row['HttpRequest'],
                                              pname=row['Tag'], category=row['Type'],
                                              data=row['StepsToReproduce'], external_id=None)


def createPlugin():
    return CobaltPlugin()

