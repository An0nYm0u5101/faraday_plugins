"""
Faraday Penetration Test IDE
Copyright (C) 2013  Infobyte LLC (http://www.infobytesec.com/)
See the file 'doc/LICENSE' for the license information

"""

from faraday_plugins.plugins.plugin import PluginXMLFormat
import re
import os
import socket

import faraday_plugins.plugins.repo.nessus.dotnessus_v2 as dotnessus_v2



current_path = os.path.abspath(os.getcwd())

__author__ = "Francisco Amato"
__copyright__ = "Copyright (c) 2013, Infobyte LLC"
__credits__ = ["Francisco Amato"]
__license__ = ""
__version__ = "1.0.0"
__maintainer__ = "Francisco Amato"
__email__ = "famato@infobytesec.com"
__status__ = "Development"


class NessusParser:
    """
    The objective of this class is to parse an xml file generated by the nessus tool.

    TODO: Handle errors.
    TODO: Test nessus output version. Handle what happens if the parser doesn't support it.
    TODO: Test cases.

    @param nessus_filepath A proper simple report generated by nessus
    """

    def __init__(self, output):
        lists = output.split("\r\n")
        i = 0
        self.items = []
        if re.search("Could not reach", output) is not None:
            self.fail = True
            return

        for line in lists:
            if i > 8:
                item = {'link': line}
                self.items.append(item)
            i = i + 1


class NessusPlugin(PluginXMLFormat):
    """
    Example plugin to parse nessus output.
    """

    def __init__(self):
        super().__init__()
        self.extension = ".nessus"
        self.identifier_tag = "NessusClientData_v2"
        self.id = "Nessus"
        self.name = "Nessus XML Output Plugin"
        self.plugin_version = "0.0.1"
        self.version = "5.2.4"
        self.framework_version = "1.0.1"
        self.options = None
        self._current_output = None
        self._current_path = None
        self._command_regex = re.compile(
            r'^(nessus|sudo nessus|\.\/nessus).*?')
        self.host = None
        self.port = None
        self.protocol = None
        self.fail = None


    def canParseCommandString(self, current_input):
        if self._command_regex.match(current_input.strip()):
            return True
        else:
            return False

    def parseOutputString(self, output, debug=False):
        """
        This method will discard the output the shell sends, it will read it from
        the xml where it expects it to be present.

        NOTE: if 'debug' is true then it is being run from a test case and the
        output being sent is valid.
        """
        dotnessus_report = dotnessus_v2.Report()
        try:
            dotnessus_report.parse(output, from_string=True)
        except Exception as e:
            self.logger.error("Exception - %s", e)

        for target in dotnessus_report.targets:
            mac = ""
            host = ""
            ip = ""

            if target.get('mac-address'):
                mac = target.get('mac-address')
            if target.get('host-fqdn'):
                host = target.get('host-fqdn')
            if target.get('host-ip'):
                ip = target.get('host-ip')

            if not ip:
                if not target.get_ips():
                    continue
                ip = target.get_ips().pop()

            host_id = self.createAndAddHost(ip, target.get('operating-system'), hostnames=[host])

            if self._isIPV4(ip):
                i_id = self.createAndAddInterface(host_id, ip, mac, ipv4_address=ip, hostname_resolution=[host])
            else:
                i_id = self.createAndAddInterface(host_id, ip, mac, ipv6_address=ip, hostname_resolution=[host])

            srv = {}
            for vuln_data in target.vulns:
                external_id = vuln_data.get('plugin_id')
                desc = vuln_data.get('description') if vuln_data.get('description') else ""
                resolution = vuln_data.get('solution') if vuln_data.get('solution') else ""
                data = "\nOutput: " + vuln_data.get('plugin_output') if vuln_data.get('plugin_output') else ""
                ref = []
                if vuln_data.get('cve'):
                    cves = vuln_data.get('cve')
                    for cve in cves:
                        ref.append(cve.strip())
                if vuln_data.get('bid'):
                    bids = vuln_data.get('bid')
                    for bid in bids:
                        ref.append("BID-%s" % bid.strip())
                if vuln_data.get('cvss_base_score'):
                    ref.append("CVSS: " + ", ".join(vuln_data.get('cvss_base_score')))
                if vuln_data.get('xref'):
                    ref.append(", ".join(vuln_data.get('xref')))
                if vuln_data.get('svc_name') == "general":
                    self.createAndAddVulnToHost(host_id, vuln_data.get('plugin_name'), desc=desc, ref=ref,
                                                          data=data, severity=vuln_data.get('severity'),
                                                          resolution=resolution, external_id=external_id)
                else:
                    service_id = self.createAndAddServiceToInterface(host_id, i_id, vuln_data.get('svc_name'),
                                                               vuln_data.get('protocol'),
                                                               ports=[str(vuln_data.get('port'))],
                                                               status="open")
                    web = re.search(r'^(www|http)', vuln_data.get('svc_name'))
                    if vuln_data.get('svc_name') in srv:
                        srv[vuln_data.get('svc_name')] = 1
                    if external_id == '0':
                        continue
                    if web:
                        self.createAndAddVulnWebToService(host_id, service_id, vuln_data.get('plugin_name'),
                                                                 desc=desc, data=data, website=host, severity=vuln_data.get('severity'),
                                                                 resolution=resolution, ref=ref, external_id=external_id)
                    else:
                        self.createAndAddVulnToService(host_id, service_id, vuln_data.get('plugin_name'),
                                                              desc=desc, data=data, severity=vuln_data.get('severity'), resolution=resolution,
                                                              ref=ref, external_id=external_id)

    def _isIPV4(self, ip):
        if len(ip.split(".")) == 4:
            return True
        else:
            return False

    def processCommandString(self, username, current_path, command_string):
        return None

    def setHost(self):
        pass

    def resolve(self, host):
        try:
            return socket.gethostbyname(host)
        except:
            pass
        return host


def createPlugin():
    return NessusPlugin()

# I'm Py3
